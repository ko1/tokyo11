- name: 開場
  name_en: Doors Open
  type: other
  starts_at: "9:30"

- name: 開会の挨拶
  name_en: Opening
  type: other
  starts_at: "9:50"

- name: まつもとゆきひろ
  name_en: Yukihiro 'Matz' Matsumoto
  gravatar_url: https://www.gravatar.com/avatar/0ec4920185b657a03edf01fff96b4e9b
  affi: 日経Linuxライター
  desc: To Be Announced...
  desc_en: 
  twitter: yukihiro_matz
  github: matz
  type: invited_talk
  title: Streem
  title_en: Streem
  abstract: <p>発表概要は、事前インタビューをご覧下さい。</p>
  abstract_en:
  knowledge: 
  starts_at: "10:10"
  interview: done

- name: 田中 和明
  name_en: Kazuaki Tanaka
  gravatar_url: https://www.gravatar.com/avatar/c00e107a1d249b046ecb7d2138ce88cc
  affi: 九州工業大学
  desc: mruby, mruby/c開発者, 大学では組込みソフトウェアの研究に従事している．
  desc_en: mruby and mruby/c developper, and also a researcher in embedded software area
  twitter:
  github: kaz0505
  type: talk
  title: mruby/c
  title_en: mruby/c
  abstract: <p>OSS版のmrubyよりも小さな資源で動作するVMの実装です．40KB程度のメモリで動作しています．ワンチップマイコンを想定した実装になっていて，多くのクラスを削減しています．そのため，一般的なRubyプログラムには向きませんが，組込みシステムでの機器制御やIoT分野への適用を目指しています．</p>
  abstract_en: <p>mruby is a lightweight Ruby interpreter with the intention of being easily embeddable. mruby/c is a VM implementation that works on even less resources than the OSS version of mruby. It works with around 40KB of memory. This implementation assumes the use of a one-chip microcomputer, so it has a considerably reduced number of classes. Therefore, it is not suitable for general Ruby programming; however, its application is aimed at the control of embedded system devices and the development of IoT products.</p>
  knowledge: mruby
  starts_at:
  interview: done

- name: 栗原 勇樹
  name_en: Yuki Kurihara
  gravatar_url: https://www.gravatar.com/avatar/77897395d9b84463bd474a69b922b2ec
  affi: 株式会社spice life
  desc: RubyKaja 2014。子育ての合間に小さいライブラリーを作るのが趣味。
  desc_en: A software engineer, one of the <a href="http://kaja.rubyist.net/">RubyKaja 2014 winners</a> and a father. He enjoys writing small libraries when he has free time.
  twitter: _ksss_
  github: ksss
  type: talk
  title: Rubyに型があると便利か
  title_en: Pseudo Type System on Struct
  abstract: <p>最近開発したgem <a href="https://github.com/ksss/type_struct">type_struct</a> を中心に「Rubyに型があると便利か」という問いについて考察します。ひいては、Ruby3への議論に貢献できればと考えています。</p>
  abstract_en: "<p>Everyone knows Ruby is a dynamic programming language, but what if it was statically typed? In this talk, I'll talk about whether having a type system in Ruby would be useful or not by walking through what we can do with <a href=\"https://github.com/ksss/type_struct\">type_struct</a>. Come and join me for a conversation about the future of Ruby 3 and its type system.</p>"
  knowledge: 基本的なRubyの知識があればよいです。golangやcrystalのさわりもわかっていると、より楽しめると思います。
  starts_at:
  interview: done

- name: ランチ
  name_en: Lunch
  type: other
  starts_at: "12:05"

- name: 奥一穂
  name_en: Kazuho Oku
  gravatar_url: http://www.gravatar.com/avatar/a1f8ed12fefd7759ef8838e62ee409a6
  affi: 株式会社ディー・エヌ・エー
  affi_en: DeNA Co., Ltd.
  desc: MIT TR100、日本OSS貢献者賞受賞、未踏ソフト認定の天才プログラマー。ウェブ基盤ソフトウェアが専門。代表作にPalmscape/Xiino、Japanize、Pathtraq、Q4M等。最近の仕事はHTTP/2サーバ「H2O」の開発。
  desc_en: 
  twitter: kazuho
  github: kazuho
  type: invited_talk
  title: 最速ウェブサーバの作り方
  title_en: How to make the fastest web server
  abstract: <p>近年、ウェブの体感速度は、ネットワークのバンド幅ではなくレイテンシによって律速される傾向が強まってきています。また、それに伴い、TCP Fast Open、HTTP/2、TLS 1.3といった、レイテンシの影響を削減／隠蔽する技術の標準化が進んでいます。本セッションでは、HTTP/2サーバ「H2O」の主開発者が、レイテンシの影響削減を主目的とするサーバのプログラミング技法や、HTTP/2の更なる高速化を実現する手法として標準化提案中の「Cache Digest」等を紹介し、それらをrubyから制御する手法を検討します。</p>
  abstract_en: <p>In recent years, performance bottleneck of the Web has shifted from network bandwidth to latency.  In response, technologies that reduce and / or conceal the latency are getting standardized, which include, but not limited to TCP Fast Open, HTTP/2, TLS 1.3.  In the session, lead developer of the HTTP/2 server H2O will present server programming techniques that reduce the negative influence of latency, introduce "Cache Digest" - a proposed approach to farther optimize HTTP/2, etc., and also discuss how to control them from ruby.</p>
  knowledge: TCP/IPとUnixのソケットプログラミングに関する基礎的な知識があると、分かりやすいかと思います。
  starts_at: "13:25"
  interview: done

- name: 須藤功平
  name_en: Kouhei Sutou
  gravatar_url: http://www.gravatar.com/avatar/ee6ffca720cc428d70247dcd7377dd48
  affi: 株式会社クリアコード
  desc: <a href="http://magazine.rubyist.net/?0053-Hotlinks">http://magazine.rubyist.net/?0053-Hotlinks</a>
  desc_en: |
    Kouhei is a software engineer who is passionate about free software development. He is also the president of ClearCode, Inc. and the author of <a href="http://rabbit-shocker.org">Rabbit</a>, a presentation tool for Rubyists.
  twitter: ktou
  github: kou
  type: talk
  title: アプリケーションへのRubyインタープリターの組み込み
  title_en: How I embedded a Ruby interpreter into my apps
  abstract: <p>発表者はmilter managerというアプリケーションへCRubyを組み込んだ経験と、Groongaというアプリケーションへmrubyを組み込んだ経験があります。</p><p>milter managerはメールフィルターアプリケーションです。大量の接続を同時にさばくために、マルチプロセス+イベント駆動型のサーバープログラムとして実装しています。このアプリケーションをRubyでカスタマイズするためにCRubyを組み込みました。このケースでうまく動かすためのGC、fork、シグナル、イベントループ回りの実装について紹介します。</p><p>Groongaは全文検索エンジンです。より高速に検索結果を返すために、細部もチューニングして実装しています。（細部は私は実装していません。）このアプリケーションのクエリーオプティマイザー、クエリー言語（の一部）をRubyで実現するためにmrubyを組み込みました。このケースでうまく動かすためのオブジェクトのライフサイクルの実装について紹介します。</p><p>時間次第ではmilter managerの話だけにするかもしれません。</p>
  abstract_en: "<p>I'll talk about how to embed CRuby to milter manager. milter manager is an email filtering application. It should be able to handle a large number of simultaneous connections, so it’s been implemented as multi-processing and event-driven server program. I've made a self-contained package in order to customize it using Ruby. Let’s take a deep dive into the implementation of the elements needed for this case to work successfully: GC, forks, signals, and event loops.</p>"
  knowledge: マルチプロセスとGCとシグナルとイベントループについての一般的な知識。
  starts_at:
  interview: done

- name: 辻本 和樹
  name_en: Kazuki Tsujimoto
  gravatar_url: http://www.gravatar.com/avatar/303dd57f37d64288bb4f0336332a8882
  affi: 株式会社野村総合研究所
  desc: Rubyコミッタ/power_assert開発者。いわゆるSIer業務を昼間の仕事としている一介の趣味プログラマ。
  desc_en: A Ruby committer/power_assert developer
  twitter: k_tsj
  github: k-tsj
  type: talk
  title: "Re: Pattern Matching in Ruby"
  title_en: "Re: Pattern Matching in Ruby"
  abstract: <p>Rubyでパターンマッチを実現するためのライブラリであるpattern-matchに関する発表です。</p><p>本ライブラリについてはSapporo RubyKaigi 2012の<a href="http://sapporo.rubykaigi.org/2012/ja/schedule/details/11.html">Pattern Matching in Ruby</a>というセッションで機能概要を紹介したことがありますが、今回はメタプログラミングやRefinementsといったRubyならではの表現力をフル活用している実装面についてその舞台裏をお見せします。</p>
  abstract_en: <p>I'll talk about implementation details of the pattern-match gem which uses Ruby's powerful features like metaprogramming and Refinements.</p>
  knowledge: ScalaやHaskellにおけるパターンマッチの機能を知っていると内容が理解しやすいと思いますが必須ではありません。
  starts_at:
  interview: done

- name: 休憩
  name_en: Break
  type: other
  starts_at: "15:15"

- name: Aaron Patterson
  name_en: Aaron Patterson
  gravatar_url: https://www.gravatar.com/avatar/f29327647a9cff5c69618bae420792ea
  affi: 
  desc: To Be Announced...
  desc_en: 
  twitter: tenderlove
  github: tenderlove
  type: invited_talk
  title: "Image Recognition and Code that shouldn't exist"
  title_en: "Image Recognition and Code that shouldn't exist"
  abstract: <p>この発表では、Rubyを使った画像認識処理方法について、精度向上がどのように向上していったかを説明します。それと、実際に存在する必要のないコードを見ていきます。本発表で紹介する研究の目的は、あくまでも私個人の創造的で、役に立たない課題を書くことへの挑戦であり、有益な結果を産むものではありません。本発表を「自身を表示できないクワイン」と理解して頂ければと思います。</p>
  abstract_en: <p>In this presentation we will look at how to use Ruby to do image recognition that will improve over time.  We will also look at some other code that has no reason to exist.  The point of the projects I will present is not to produce something useful, but to challenge myself to do something creative.  Think of this presentation as a Quine that cannot print itself.</p>
  knowledge:   Ruby, little about C, MtG (card game culture)
  starts_at: "15:40"
  interview: done

- name: 村田 賢太
  name_en: Kenta Murata
  gravatar_url: https://www.gravatar.com/avatar/7cca11c5257fda526eeb4b1ada28f904
  affi: Recruit Holdings Co., Ltd. / Ruby committer
  desc: リクルートホールディングス Media Technology Lab にてソフトウェアエンジニアとして働きながら、プライベートでは BigDecimal のメンテナとして Ruby の開発に携わっている。
  desc_en: "Kenta is a Ruby committer and maintains Ruby's BigDecimal. He works for Recruit Holdings Media Technology Lab as a software engineer."
  twitter: mrkn
  github: mrkn
  type: talk
  title: "IMF: Image Manipulation Framework"
  title_en: "IMF: Image Manipulation Framework"
  abstract: <p>発表者は、Ruby のための画像操作ライブラリを昨年終盤から開発しています。本発表では、このまだ開発途上のライブラリについて、いま何ができるのか、そして将来どうしようと考えているかをご説明します。</p><p>IMF の開発が順調に進めば、いずれ RMagick は不要になります。そういう世界を速く実現するため、本発表を聞いて興味を持った人が開発に協力してくれるようになると嬉しいです。</p>
  abstract_en: "<p>I've recently started developing a library for processing images. In this talk, I'll demonstrate what we can do with the library, and explain the future development plans.</p><p>I hope to remove the need for RMagick with this library as soon as possible, and I would be delighted if my presentation inspired people to help make this kind of library a reality.</p>"
  knowledge: JPEG とか PNG とか WEBP などのビットマップ画像を扱ったことがあり、Ruby で画像を処理したいなぁと思ったことがある人向けです。RMagick を使ったことがある人はなお良いです。
  starts_at:

- name: 遠藤侑介
  name_en: Yusuke Endoh
  gravatar_url: https://www.gravatar.com/avatar/e73159002200b33d51b7a6a312f2440e
  affi:
  desc: |
      <code>'Ruby コミッタ。かつてはテスト、コードカバレッジ、リリースマネジメントなどを担当していた。高速化にはあまり興味がない。また、この説明文のように役に立たないプログラムを書く「超絶技巧プログラミング」を提唱・実践している。'.tap{|s|printf(t=%{'%s'.tap{|s|printf(t=%%{%s},s,t)}},s,t)}</code>
  desc_en: |
      <code>'A Ruby committer.  He used to engage in testing, code coverage, and release management.  He is not so interested in performance improvement.  He is an advocate of "transcendental programming" that creates a useless program like this description.'.tap{|s|printf(t=%{'%s'.tap{|s|printf(t=%%{%s},s,t)}},s,t)}</code>
  twitter: mametter
  github: mame
  type: talk
  title: "Optcarrot: A pure-ruby NES emulator"
  title_en: "Optcarrot: A pure-ruby NES emulator"
  abstract: <p>Ruby の高速化を煽るためのベンチマークプログラムとして、任天堂の家庭用ゲーム機であるファミリーコンピュータのエミュレータ Optcarrot を Ruby で開発した。高速な Ruby プログラムを書くための工夫と、各種 Ruby 処理系のベンチマーク結果を紹介し、MRI の最適化方針について議論する。</p>
  abstract_en: <p>We developed a Nintendo Entertainment System (NES) emulator in Ruby, called Optcarrot, as a non-trivial benchmark program for driving performance improvement of Ruby implementations.  We present ProTips(TM) for writing a fast Ruby program and a benchmark result of some Ruby implementations, and discuss some promising approaches to improve performance of MRI.</p>
  knowledge: ハードウェアに関する基礎的な知識があると望ましい。
  knowledge_en: Basic understanding about hardware will be helpful.
  starts_at:
  interview: done

- name: 休憩
  name_en: Break
  type: other
  starts_at: "17:35"

- name: 古橋 貞之
  name_en: Sadayuki Furuhashi
  gravatar_url: https://www.gravatar.com/avatar/aba3c1870b6cea67493617e5a343b586
  affi: Treasure Data, Inc. Founder & Software Architect
  desc: 分散データベース「PlazmaDB」や分散Key-Valueストア「Kumofs」など、十年にわたって分散システムの開発に携わる。また、バイナリシリアライズ形式『MessagePack』、ログコレクタ『Fluentd』、並列ETL『Embulk』などのオープンソースプロジェクトを創始した。
  desc_en: An OSS hacker. He founded successful projects including MessagePack - a binary serialization format, Fluentd - streaming log collector, and Embulk - a parallel ETL. He has been working on distributed systems for a decade, and developing a distributed storage named "PlazmaDB" at Treasure Data.
  twitter: frsyuki
  github: frsyuki
  type: keynote
  title: 分散ワークフローエンジン『Digdag』の実装
  title_en: '"Digdag" - Implementation of A Distributed Workflow Engine'
  abstract: <p>ワークフローエンジンは、依存関係のある複数のタスクを実行するツールです。古典的なMakefileを始め、Python製のLuigi、商用のJP1/AJS3など、様々な実装があります。Digdagは、現在活発に開発が進んでいる新しいワークフローエンジンです。このセッションでは、ツリー構造を持つワークフローの状態遷移を効率的に実行する手法、ワークフローの実行状態の永続化と分散実行、タスクスケジューラ、Dockerによるサンドボックス化など、その実装手法を紹介しながらワークフローエンジンの構成技術について解説します。</p>
  abstract_en: <p>A workflow engine is a tool that processes multiple tasks with dependencies. Historically, there are a lot of implementations including traditional Makefile, open-source Python software "Luigi", and "JP1/AJS3" made by Hitachi. Digdag is a new workflow engine that is in active development. In this session, I'll cover implementation techniques used in workflow engines by explaining details of Digdag such as efficient state transition of nodes in a tree structure, persistent store and transfer of execution state of tasks over network, fair task scheduling, and sandboxed task execution in Docker containers.</p>
  knowledge: SQLの基本的な知識と、Rubyのリフレクション、オプティマイザなどの知識があると、より楽しめると思います。
  starts_at: "17:55"
  interview: done
